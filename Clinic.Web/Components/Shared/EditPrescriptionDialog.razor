@using Clinic.Domain.Entities
@using Clinic.Infrastructure.Persistence
@using Clinic.Web.ViewModels
@using Microsoft.EntityFrameworkCore
@inject ClinicDbContext DbContext
@inject DialogService DialogService

<RadzenTemplateForm TItem="EditPrescriptionViewModel" Data="@Model" Submit="@OnSubmit">
    <DataAnnotationsValidator/>
    <RadzenStack Gap="1.5rem">
        <RadzenFieldset Text="Medication Details">
            <RadzenStack Gap="1rem">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                    <RadzenCheckBox @bind-Value="@_isExternal" TValue="bool"/>
                    <RadzenLabel Text="Prescribing non-inventoried item"/>
                </RadzenStack>
                <hr/>
                @if (_isExternal)
                {
                    <RadzenTextBox @bind-Value="@Model.MedicationName" Placeholder="Medication Name..."
                                   Style="width: 100%;" Name="MedicationName"/>
                    <RadzenRequiredValidator Component="MedicationName" Text="Medication name is required"/>
                }
                else
                {
                    <RadzenDropDown AllowFiltering="true" Data="@_inventoryItems" TextProperty="Name" ValueProperty="Id"
                                    Placeholder="Search for an in-house product..." @bind-Value="@Model.InventoryItemId"
                                    Change="@OnProductSelected" Style="width:100%;" Name="InventoryItem"/>
                    <RadzenRequiredValidator Component="InventoryItem" Text="Please select a product from inventory"/>
                }
            </RadzenStack>
        </RadzenFieldset>

        <RadzenFieldset Text="Instructions">
            <RadzenStack Gap="1rem">
                <RadzenDropDown Data="@_formList" @bind-Value="@Model.Form" Placeholder="Select form..."
                                Style="width: 100%;"/>
                <RadzenTextBox @bind-Value="@Model.Dosage" Placeholder="Dosage (e.g., 1 tablet twice daily)"
                               Style="width: 100%;" Name="Dosage"/>
                <RadzenRequiredValidator Component="Dosage" Text="Dosage is required"/>
                <RadzenTextBox @bind-Value="@Model.Instructions" Placeholder="Instructions (e.g., With food)"
                               Style="width: 100%;"/>
                <RadzenNumeric @bind-Value="@Model.Quantity" Placeholder="Quantity"/>
            </RadzenStack>
        </RadzenFieldset>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-4">
        <RadzenButton ButtonType="ButtonType.Submit" Text="Update Prescription"/>
        <RadzenButton Text="Cancel" Click="@(() => DialogService.Close(null))" ButtonStyle="ButtonStyle.Light"/>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter] public EditPrescriptionViewModel Model { get; set; } = new();

    private bool _isExternal;
    private List<InventoryItem> _inventoryItems = new();
    private readonly List<string> _formList = new() { "Tablet", "Capsule", "Liquid", "Injection", "Ointment", "Powder" };

    protected override async Task OnInitializedAsync()
    {
        _inventoryItems = await DbContext.InventoryItems
            .Where(i => i.Category == "Pharmacy")
            .AsNoTracking()
            .ToListAsync();

        _isExternal = !Model.InventoryItemId.HasValue;
    }

    private void OnProductSelected(object value)
    {
        if (value is int inventoryId)
        {
            var selectedItem = _inventoryItems.FirstOrDefault(i => i.Id == inventoryId);
            if (selectedItem != null)
            {
                Model.MedicationName = selectedItem.Name;
                Model.Form = selectedItem.Form;
            }
        }
    }

    private void OnSubmit(EditPrescriptionViewModel model)
    {
        if (_isExternal)
        {
            model.InventoryItemId = null;
        }

        DialogService.Close(model);
    }

}
